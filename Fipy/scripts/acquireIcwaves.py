"""
This script demonstrates how an icWaves scope can be used within a FIPy script
using pinata as a target. Pinata is configured to perform a SW - AES crypto algorithm.
All the settings to set up the icWaves can be configured through the GUI.
The traces generated by this script can be used as input for the SAD simulation tool.

To set up this demo you need:

1. icWaves
2. Pinata
3. some device to generate a trigger (e.g. most oscilloscopes can generate a block wave)
"""

import datetime
import time
from pathlib import Path

from icwavessdk.enums import *
from icwavessdk.icwaves import *
from trsfile import *
from trsfile import traceparameter
from trsfile.parametermap import TraceSetParameterMap, TraceParameterDefinitionMap

from fipy.parameters import *
from fipy.scriptutils import ResultColor, fipy_script
from fipy.trs.standard_trace_set_parameters import StandardTraceSetParameters

import serial
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from spidersdk.chronology import Chronology
from spidersdk.spider import Spider
PARAMETERS = Parameters(
    ('attempts', # {'attempts': 5}
        AttemptsParameter('Attempts')),
    ('timebase', # {'value': '0'}
        EnumParameter('Sampling Frequency', ICWavesTimebase)),
    ('range', # {'value': '5'}
        EnumParameter('Range', ICWavesInputRange)),
    ('impedance', # {'value': '0'}
        EnumParameter('Impedance', ICWavesImpedance)),
    ('coupling', # {'value': '1'}
        EnumParameter('Coupling', ICWavesCoupling)),
    ('trigger_edge', # {'value': '0'}
        EnumParameter('Trigger edge', ICWavesTriggerPulseEdge)),
    ('trigger_level', # {'type': 3, 'value': 0.7}
        FloatParameter('Trigger level', unit='V')),
    ('trigger_timeout', # {'type': 3, 'value': 1000}
        IntParameter('Trigger timeout', unit='ms')),
    ('pre_num_samples', # {'type': 3, 'value': 0}
        IntParameter('Number of pre-trigger samples')),
    ('post_num_samples', # {'type': 3, 'value': 50000}
        IntParameter('Number of post-trigger samples')),
    ('post_num_samples', # {'type': 3, 'value': 50000}
        IntParameter('Number of post-trigger samples')),
    ('attempts', # {'attempts': 5}
        AttemptsParameter('Attempts')),
    ('serial_com_port', # {'value': ''}
        SerialPortParameter('serial_com_port')),
    ('serial_baudrate', # {'type': 3, 'value': 115200}
        IntParameter('serial_baudrate')),
    ('serial_timeout', # {'type': 3, 'value': 0.1}
        FloatParameter('serial_timeout')),
    ('spider_com_port', SerialPortParameter('Spider COM')),
    ('normal_voltage', FloatParameter('Normal voltage', unit='V'))
)

GLITCH_OUT = Spider.GLITCH_OUT1
TRIGGER_IN = 31
RESET_OUT  = 0
TRIGGER_OUT = 15
TRIGGER_EDGE = Spider.RISING_EDGE

@fipy_script
def execute_script(util):
    util.set_termination_timeout(5)
    util.parameter_init(PARAMETERS)

    script_name = Path(__file__).stem
    db = util.create_database_table('logs/{}.sqlite'.format(script_name),
                                    '{}'.format(script_name))
    util.add_to_cleanup(util.close_database)
    # Hardware initialization (Spider)
    spider_com_port = serial.Serial()
    spider_com_port.port = str(PARAMETERS['spider_com_port'])
    spider_com_port.open()
    spider_core1 = Spider(Spider.CORE1, spider_com_port)
    spider_core1.reset_settings()
    util.add_to_cleanup(spider_com_port.close)

    serial_target = serial.Serial()
    serial_target.baudrate = int(PARAMETERS['serial_baudrate'])
    serial_target.timeout = float(PARAMETERS['serial_timeout'])
    serial_target.port = str(PARAMETERS['serial_com_port'])
    serial_target.open()
    util.add_to_cleanup(serial_target.close)

    serial_target.reset_input_buffer()
    serial_target.reset_output_buffer()


    # open the first icwaves found in the system as a scope
    with ICWavesScope() as scope:
        scope.set_timebase(PARAMETERS['timebase'])
        scope.set_channel(PARAMETERS['range'],
                          PARAMETERS['coupling'],
                          PARAMETERS['impedance'])
        scope.set_trigger(ICWavesTriggerChannel.TRIGGER_IN,
                          PARAMETERS['trigger_edge'],
                          PARAMETERS['trigger_level'])

        # Set up trace set name and header
        ts = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")

        # Note that the 'StandardTraceSetParameters.SETUP_OSCILLOSCOPE_DEVICE_IDENTIFIER' is used by Inspector and FIPy to
        # identify that a trace set was measured using an icWaves
        # This will allow the user to perform SAD simulation, and load the resulting pattern into the icWaves pattern memory
        headers = {
            Header.LABEL_X: 's',
            Header.LABEL_Y: 'V',
            Header.ACQUISITION_RANGE_OF_SCOPE: PARAMETERS['range'].value.voltage,
            Header.ACQUISITION_OFFSET_OF_SCOPE: 0.0,
            Header.ACQUISITION_COUPLING_OF_SCOPE: int(PARAMETERS['coupling']),
            Header.SAMPLE_CODING: SampleCoding.BYTE,
            Header.SCALE_Y: PARAMETERS['range'].value.voltage / 256,
            Header.SCALE_X: 1 / PARAMETERS['timebase'].value.frequency,
            Header.TRACE_SET_PARAMETERS: TraceSetParameterMap({
                StandardTraceSetParameters.SETUP_OSCILLOSCOPE_DEVICE_IDENTIFIER.name: traceparameter.StringParameter(
                    "icWaves_" + scope.icwaves.get_serial_number())
            }),
            Header.TRACE_PARAMETER_DEFINITIONS: TraceParameterDefinitionMap(),
            Header.TRS_VERSION: 2
        }

        traceset = TraceSet(
            headers=headers,
            path='traces/{}_{}.trs'.format(script_name, ts),
            mode='w',
            padding_mode=TracePadding.AUTO)
        util.add_to_cleanup(traceset.close)

        counter = 0
        
        try:
            glitcher = Chronology(spider_core1)
        except IndexError as e:
            raise Exception(str(e) +
                            "\n\nDid you select the right COM port for Spider? Is it powered on?")


        glitcher.forget_events()  # Forget any previous added events
            
        normal_vcc = float(PARAMETERS['normal_voltage'])

        glitcher.set_vcc_now(GLITCH_OUT, normal_vcc)
        glitcher.set_gpio_now(RESET_OUT, 1)

        counter = 0
        do_reset = True
    
        for p in PARAMETERS:
            t = time.time()
            if not util.process_commands():
                break
                
            glitcher.forget_events()  


            # Perform reset "Now", instead of in the state machine
            # sleeps might require manual tuning, based on device
            glitcher.set_gpio(RESET_OUT, 0)
            glitcher.set_vcc(GLITCH_OUT, 0)
            
            glitcher.wait_time(0.1e-3)
            glitcher.set_gpio(RESET_OUT, 1)

            #glitcher.wait_time(10e-3)

            glitcher.set_vcc(GLITCH_OUT, normal_vcc)
            glitcher.wait_trigger(TRIGGER_IN, TRIGGER_EDGE, count=1)
            glitcher.set_gpio(TRIGGER_OUT, 1)
            




            # Arm the icwaves for an incoming hardware trigger and run acquisition
            scope.arm(int(PARAMETERS['pre_num_samples']),
                      int(PARAMETERS['post_num_samples']),
                      int(PARAMETERS['trigger_timeout']))

            glitcher.start()
            # Retrieve the captured samples from the icWaves device
            spider_timeout = glitcher.wait_until_finish(1000)

            samples, timeout = scope.get_data()
            result = ResultColor.GREEN
            if timeout:
                result = ResultColor.YELLOW
            else:
                # Create and add a new Trace. Note that the result trace does not contain any TraceParameters.
                trace = Trace(SampleCoding.BYTE,
                              samples,
                              title=f'Channel {ICWavesInputChannel.ANALOG1}')
                traceset.append(trace)

            result = Parameters(
                ("id", counter),
                ("timestamp", int(t)),
                ("iter_t (ms)", int((time.time() - t) * 1000)),
                ("Timeout", timeout),
                ("Color", int(result)),
                ("id", counter),
                ("timestamp", int(t)),
                ("iter_t", int((time.time() - t) * 1000)),
                ("Data", ""),
                ("SpiderTimeout",spider_timeout)
            )
            glitcher.set_gpio_now(TRIGGER_OUT, 0)
            util.monitor(result)
            db.add(result)

            counter += 1